
背景

    我们在开发过程中，通常都会定义大量的JavaBean，然后通过IDE去生成其属性的构造器、getter、setter、equals、hashcode、toString方法，当要对某个属性进行改变时，比如命名、类型等，都需要重新去生成上面提到的这些方法，那Java中有没有一种方式能够避免这种重复的劳动呢？


Lombok简介

    Lombok是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，通过使用对应的注解，可以在编译源码的时候生成对应的方法。官方地址：https://projectlombok.org/，github地址：https://github.com/rzwitserloot/lombok。


Maven仓库：

<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>${lombok.version}</version>
    <scope>provided</scope>
</dependency>


注解介绍  【另：若使用IntelliJ IDEA编辑器，可使用其左边栏把Project切换到Structure，实时观察Lombok的自动生成代码的编译结果】

    下面只是介绍了几个常用的注解，更多的请参见https://projectlombok.org/features/index.html。

@Getter / @Setter

    可以作用在类上和属性上，放在类上，会对所有的非静态(non-static)属性生成Getter/Setter方法，放在属性上，会对该属性生成Getter/Setter方法。并可以指定Getter/Setter方法的访问级别。

@EqualsAndHashCode

    默认情况下，会使用所有非瞬态(non-transient)和非静态(non-static)字段来生成equals和hascode方法，也可以指定具体使用哪些属性。

@ToString

    生成toString方法，默认情况下，会输出类名、所有属性，属性会按照顺序输出，以逗号分割。

@NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor

    无参构造器、部分参数构造器、全参构造器，当我们需要重载多个构造器的时候，Lombok就无能为力了。
    【@RequiredArgsConstructor会生成部分参数构造方法，参数包括：以final修饰的未经初始化的属性，或者是以@NonNull注解的未经初始化的属性。另外，@NonNull标注的属性，还会进行空值检查。】
    【注意：如果某属性标注@NonNull，则部分参、全参构造器在运行时，都会检查该属性是否为null，若是则抛出NullPointerException】
    【另：如果类中没有写任何构造函数，则编译器会默认加上一个无参构造函数；如果写了一个带参构造函数，则编译器不再提供；Lombok同理】


@Data

    @ToString, @EqualsAndHashCode, 所有属性的@Getter, 所有non-final属性的@Setter和@RequiredArgsConstructor的组合，通常情况下，我们使用这个注解就足够了。

官网对@Data的介绍：
A shortcut for @ToString, @EqualsAndHashCode, @Getter on all fields, @Setter on all non-final fields, and @RequiredArgsConstructor!




另：Lombok也并非毫无缺点，使用Lombok需要处理的问题主要有：

1）无法支持多种参数构造器的重载
2）需要IDE额外安装插件，否则无法运行，例如IDEA需要安装IntelliJ Lombok plugin
3）有人认为是奇淫巧技，使用会有争议

